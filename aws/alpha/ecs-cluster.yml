AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS: cluster"
Parameters:
  ClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: "odf-ecs"
  ParentVPCStack:
    Description: "Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template."
    Type: AWS::SSM::Parameter::Value<String>
    Default: ODF_VPC
  KeyName:
    Description: "Optional key pair of the ec2-user to establish a SSH connection to the EC2 instances of the ECS cluster."
    Type: AWS::SSM::Parameter::Value<String>
    Default: ODF_KEY
  SubnetsReach:
    Description: "Should the cluster have direct access to the Internet or do you prefer private subnets with NAT?"
    Type: String
    Default: Public
    AllowedValues:
      - Public
      - Private
  InstanceType:
    Description: "The instance type of the EC2 instances of the ECS cluster."
    Type: String
    Default: "t2.micro"
  LogsRetentionInDays:
    Description: "Specifies the number of days you want to retain log events in the specified log group."
    Type: Number
    Default: 14
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
Mappings:
  RegionMap: # TODO update to Amazon Linux 2 (don't forget to adjust awslogs config as well)
    "ap-southeast-1":
      ECSAMI: "ami-0627e2913cf6756ed"
    "ap-southeast-2":
      ECSAMI: "ami-0d28e5e0f13248294"
Resources:
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NetworkInterface:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      GroupSet:
        - !Ref SecurityGroup
      SubnetId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetAPublic" }
  EIPAssociation:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      AllocationId: !GetAtt "ElasticIP.AllocationId"
      NetworkInterfaceId: !Ref NetworkInterface
  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref ClusterName
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref Role
  Role:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns: [
        "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole",
        "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
        "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess"
      ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
  IAMPolicySSHAccess:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref Role
      PolicyName: "iam-ssh"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:ListUsers"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "iam:ListSSHPublicKeys"
              - "iam:GetSSHPublicKey"
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ecs-cluster"
      VpcId: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
  SecurityGroupInSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  SecurityGroupInHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  ECSInstance:
    DependsOn: EIPAssociation
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - ECSAMI
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref NetworkInterface
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
Outputs:
  StackName:
    Description: "Stack name."
    Value: !Sub "${AWS::StackName}"
  Cluster:
    Description: "ECS cluster."
    Value: !Ref Cluster
    Export:
      Name: !Sub "${AWS::StackName}-Cluster"
  VPC:
    Description: "VPC of ECS cluster."
    Value: { "Fn::ImportValue": !Sub "${ParentVPCStack}-VPC" }
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  SecurityGroup:
    Description: "Security Group of ECS cluster."
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup"
  LogGroup:
    Description: "Log group of ECS cluster."
    Value: !Ref LogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"
